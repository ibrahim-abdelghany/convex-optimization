import cvxpy as cp
import numpy as np

# problem data
n = 4

A = np.matrix([[1, 2, 0, 1],
               [0, 0, 3, 1],
               [0, 3, 1, 1],
               [2, 1, 2, 5],
               [1, 0, 3, 2]])

c_max = np.array([100, 100, 100, 100, 100])

p = np.array([3, 2, 7 ,6])

p_disc = np.array([2, 1, 4 ,2])

q = np.array([4, 10, 5, 10])

# variables
x = cp.Variable(n)
t = cp.Variable(n)

# problem
objective = cp.Maximize(cp.sum(t))
constraints = [
    x >= 0,
    A @ x <= c_max,
    t <= cp.diag(p) @ x,
    t <= cp.diag(p) @ q + cp.diag(p_disc) @ (x - q)
]

problem = cp.Problem(objective, constraints)

problem.solve()

print("status:", problem.status)
print("optimal value", problem.value)
print("optimal x", x.value)
print("optimal t", t.value)

print("optimal activity levels: x=", x.value)
print("revenue generated by each activity level: t=", t.value)
print("total revenue generated: optimal_value=", problem.value)
print("average price per unit of activity: t./x=", np.divide(t.value,x.value))
print("cost vector: A @ x = ", A @ x.value)

# Comments:
# either t<= px or t<= pq + p_disc(x-q) is active for each xi
# the last 3 resources are maximized, while the second is at 94%
# two of the activity levels entered the discount zone while the other two remained under qi's

print("*"*40)


# solve using concave function

x_c = cp.Variable(n)

concave_objective = cp.Maximize(cp.sum(cp.minimum(cp.diag(p) @ x_c, cp.diag(p) @ q + cp.diag(p_disc) @ (x_c - q))))
concave_constraints = [ 
    x_c >= 0,
    A @ x_c <= c_max
]

concave_problem = cp.Problem(concave_objective, concave_constraints)

concave_problem.solve()

print("status:", concave_problem.status)
print("optimal value", concave_problem.value)
print("optimal x", x_c.value)